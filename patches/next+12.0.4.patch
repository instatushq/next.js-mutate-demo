diff --git a/node_modules/next/dist/server/incremental-cache.js b/node_modules/next/dist/server/incremental-cache.js
index ea4c313..2bcf303 100644
--- a/node_modules/next/dist/server/incremental-cache.js
+++ b/node_modules/next/dist/server/incremental-cache.js
@@ -55,7 +55,8 @@ class IncrementalCache {
     getSeedPath(pathname, ext) {
         return _path.default.join(this.incrementalOptions.pagesDir, `${pathname}.${ext}`);
     }
-    calculateRevalidate(pathname, fromTime) {
+    calculateRevalidate(pathname, url, fromTime) {
+        console.log('calculateRevalidate url', url);
         pathname = toRoute(pathname);
         // in development we don't have a prerender-manifest
         // and default to always revalidating to allow easier debugging
@@ -64,14 +65,16 @@ class IncrementalCache {
             initialRevalidateSeconds: 1
         };
         const revalidateAfter = typeof initialRevalidateSeconds === 'number' ? initialRevalidateSeconds * 1000 + fromTime : initialRevalidateSeconds;
-        return revalidateAfter;
+        const mutate = url && url.includes('MUTATE');
+        return mutate ? new Date().getTime() - 1000 : revalidateAfter;
     }
     getFallback(page) {
         page = (0, _normalizePagePath).normalizePagePath(page);
         return _fs.promises.readFile(this.getSeedPath(page, 'html'), 'utf8');
     }
     // get data from cache if available
-    async get(pathname) {
+    async get(pathname, url) {
+        console.log('incremental cache get url', url);
         if (this.incrementalOptions.dev) return null;
         pathname = (0, _normalizePagePath).normalizePagePath(pathname);
         let data = this.cache && this.cache.get(pathname);
@@ -79,7 +82,7 @@ class IncrementalCache {
         if (!data) {
             if (this.prerenderManifest.notFoundRoutes.includes(pathname)) {
                 const now = Date.now();
-                const revalidateAfter = this.calculateRevalidate(pathname, now);
+                const revalidateAfter = this.calculateRevalidate(pathname, url, now);
                 data = {
                     value: null,
                     revalidateAfter: revalidateAfter !== false ? now : false
@@ -91,7 +94,7 @@ class IncrementalCache {
                 const { mtime  } = await _fs.promises.stat(htmlPath);
                 const pageData = JSON.parse(await _fs.promises.readFile(this.getSeedPath(pathname, 'json'), 'utf8'));
                 data = {
-                    revalidateAfter: this.calculateRevalidate(pathname, mtime.getTime()),
+                    revalidateAfter: this.calculateRevalidate(pathname, url, mtime.getTime()),
                     value: {
                         kind: 'PAGE',
                         html,
@@ -108,18 +111,20 @@ class IncrementalCache {
         if (!data) {
             return null;
         }
-        if (data && data.revalidateAfter !== false && data.revalidateAfter < new Date().getTime()) {
+        const mutate = url && url.includes('MUTATE')
+        if (mutate || (data && data.revalidateAfter !== false && data.revalidateAfter < new Date().getTime())) {
             data.isStale = true;
         }
         const manifestPath = toRoute(pathname);
         const manifestEntry = this.prerenderManifest.routes[manifestPath];
         if (data && manifestEntry) {
-            data.curRevalidate = manifestEntry.initialRevalidateSeconds;
+            data.curRevalidate = mutate ? 1 : manifestEntry.initialRevalidateSeconds;
         }
         return data;
     }
     // populate the incremental cache with new data
-    async set(pathname, data, revalidateSeconds) {
+    async set(pathname, url, data, revalidateSeconds) {
+        console.log('incremental cache set url', url);
         if (this.incrementalOptions.dev) return;
         if (typeof revalidateSeconds !== 'undefined') {
             // TODO: Update this to not mutate the manifest from the
@@ -133,7 +138,7 @@ class IncrementalCache {
         pathname = (0, _normalizePagePath).normalizePagePath(pathname);
         if (this.cache) {
             this.cache.set(pathname, {
-                revalidateAfter: this.calculateRevalidate(pathname, new Date().getTime()),
+                revalidateAfter: this.calculateRevalidate(pathname, url, new Date().getTime()),
                 value: data
             });
         }
diff --git a/node_modules/next/dist/server/next-server.js b/node_modules/next/dist/server/next-server.js
index 466a082..06b88de 100644
--- a/node_modules/next/dist/server/next-server.js
+++ b/node_modules/next/dist/server/next-server.js
@@ -1451,12 +1451,13 @@ class Server {
                     pageData
                 };
             }
+            console.log('SPRRRRRR', sprRevalidate)
             return {
-                revalidate: sprRevalidate,
+                revalidate: req.url && req.url.includes('?MUTATE') ? false : sprRevalidate,
                 value
             };
         };
-        const cacheEntry = await this.responseCache.get(ssgCacheKey, async (hasResolved)=>{
+        const cacheEntry = await this.responseCache.get(ssgCacheKey, req.url, async (hasResolved)=>{
             const isProduction = !this.renderOpts.dev;
             const isDynamicPathname = (0, _utils).isDynamicRoute(pathname);
             const didRespond = hasResolved || (0, _utils1).isResSent(res);
@@ -1494,6 +1495,7 @@ class Server {
                     throw new NoFallbackError();
                 }
                 if (!isDataReq) {
+                    console.log('!isDataReq')
                     // Production already emitted the fallback as static HTML.
                     if (isProduction) {
                         const html = await this.incrementalCache.getFallback(locale ? `/${locale}${pathname}` : pathname);
@@ -1524,9 +1526,10 @@ class Server {
             if (!result) {
                 return null;
             }
+            const mutate = req.url && req.url.includes('?MUTATE')
             return {
                 ...result,
-                revalidate: result.revalidate !== undefined ? result.revalidate : /* default to minimum revalidate (this should be an invariant) */ 1
+                revalidate: result.revalidate !== undefined && !mutate ? result.revalidate : /* default to minimum revalidate (this should be an invariant) */ 1
             };
         });
         if (!cacheEntry) {
@@ -1547,7 +1550,7 @@ class Server {
             // cache according to revalidate correctly
             private: isPreviewMode || is404Page && cachedData,
             stateful: !isSSG,
-            revalidate
+            revalidate,
         } : undefined;
         if (!cachedData) {
             if (revalidateOptions) {
@@ -1576,6 +1579,7 @@ class Server {
                 return null;
             }
         } else {
+            console.log("type: isDataReq ? 'json' : 'html',")
             return {
                 type: isDataReq ? 'json' : 'html',
                 body: isDataReq ? _renderResult.default.fromStatic(JSON.stringify(cachedData.pageData)) : cachedData.html,
diff --git a/node_modules/next/dist/server/response-cache.js b/node_modules/next/dist/server/response-cache.js
index 9813ca5..a9c9748 100644
--- a/node_modules/next/dist/server/response-cache.js
+++ b/node_modules/next/dist/server/response-cache.js
@@ -14,7 +14,8 @@ class ResponseCache {
         this.incrementalCache = incrementalCache;
         this.pendingResponses = new Map();
     }
-    get(key, responseGenerator) {
+    get(key, url, responseGenerator) {
+        console.log('response cache get url', url);
         const pendingResponse = key ? this.pendingResponses.get(key) : null;
         if (pendingResponse) {
             return pendingResponse;
@@ -43,7 +44,7 @@ class ResponseCache {
         };
         (async ()=>{
             try {
-                const cachedResponse = key ? await this.incrementalCache.get(key) : null;
+                const cachedResponse = key ? await this.incrementalCache.get(key, url) : null;
                 if (cachedResponse) {
                     var ref;
                     resolve({
@@ -64,7 +65,7 @@ class ResponseCache {
                 resolve(cacheEntry);
                 if (key && cacheEntry && typeof cacheEntry.revalidate !== 'undefined') {
                     var ref;
-                    await this.incrementalCache.set(key, ((ref = cacheEntry.value) === null || ref === void 0 ? void 0 : ref.kind) === 'PAGE' ? {
+                    await this.incrementalCache.set(key, url, ((ref = cacheEntry.value) === null || ref === void 0 ? void 0 : ref.kind) === 'PAGE' ? {
                         kind: 'PAGE',
                         html: cacheEntry.value.html.toUnchunkedString(),
                         pageData: cacheEntry.value.pageData
